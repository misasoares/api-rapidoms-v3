// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid String @id @default(uuid())

  name      String
  email     String? @unique
  password  String?
  cpfOrCnpj String?
  address   String?
  phone     String  @unique

  internalOrder InternalOrder[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  Order     Order[]
  roles     Role[]

  @@map("users")
}

model Role {
  uid  String @id @default(uuid())
  name String @unique

  users User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("role")
}

model CarBrand {
  uid String @id @default(uuid())

  name String @unique

  carsModels CarModel[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("car_brands")
}

model CarModel {
  uid String @id @default(uuid())

  name String @unique

  description String

  yearFabrication Int

  carBrand    CarBrand @relation(fields: [carBrandUid], references: [uid])
  carBrandUid String

  products Product[]
  Order    Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("car_models")
}

model Product {
  uid String @id @default(uuid())

  name     String  @unique
  value    Decimal
  amper    String
  quantity Int
  cca      Int
  warranty Int

  carsModels CarModel[]
  Order      Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("products")
}

model Order {
  uid String @id @default(uuid())

  user User @relation(fields: [userUid], references: [uid])

  carModel CarModel @relation(fields: [carModelUid], references: [uid])

  product Product @relation(fields: [productUid], references: [uid])

  quantity Decimal

  totalValue  Decimal @map("total_value")
  userUid     String
  carModelUid String
  productUid  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("orders")
}

model InternalOrder {
  uid String @id @default(uuid())

  type                  EInternalOrderType
  costumerUid           String
  vehicles              String?
  productsInternalOrder ProductsInternalOrder[]
  totalValue            Decimal
  observations          String?
  status                EInternalOrderStatus
  orderNumber           String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userUid], references: [uid])
  userUid   String?

  @@map("internal_order")
}

enum EInternalOrderType {
  BUDGET
  ORDER
  RECEIPT
}

enum EInternalOrderStatus {
  IN_PROGRESS
  CONCLUDED
}

model ProductsInternalOrder {
  uid String @id @default(uuid())

  quantity         Decimal
  description      String
  unityValue       Decimal
  total            Decimal
  discount         Decimal?
  internalOrderUid String?
  InternalOrder    InternalOrder? @relation(fields: [internalOrderUid], references: [uid])

  @@map("products_internal_order")
}

model CheckRegister {
  uid String @id @default(uuid())

  payerName   String
  checkNumber String   @unique()
  payerPhone  String?
  sendTo      String?
  dueDate     DateTime
  value       String
  accBankUid  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Bank        Banks        @relation(fields: [banksUid], references: [uid])
  AccountBank AccountBank? @relation(fields: [accBankUid], references: [uid])
  banksUid    String

  @@map("check_register")
}

model Banks {
  uid String @id @default(uuid())

  name           String @unique()
  accNumber      String @unique()
  cpfOrCnpj      String
  agencyNumber   String
  accountBankUid String

  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  CheckRegister CheckRegister[]
  AccountBank   AccountBank     @relation(fields: [accountBankUid], references: [uid])

  @@map("banks")
}

model AccountBank {
  uid String @id @default(uuid())

  name String @unique()

  Banks Banks[]

  Checks CheckRegister[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("account_bank")
}

model CheckPayers {
  uid String @id @default(uuid())

  name String @unique()

  phone String?

  @@map("check_payers")
}
